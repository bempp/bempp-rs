warning: profiles for the non root package will be ignored, specify profiles at the workspace root:
package:   /home/sri/Github/bempp-rs/fmm/Cargo.toml
workspace: /home/sri/Github/bempp-rs/Cargo.toml
warning: some crates are on edition 2021 which defaults to `resolver = "2"`, but virtual workspaces default to `resolver = "1"`
note: to keep the current resolver, specify `workspace.resolver = "1"` in the workspace root's manifest
note: to use the edition 2021 resolver, specify `workspace.resolver = "2"` in the workspace root's manifest
warning: /home/sri/Github/bempp-rs/fmm/Cargo.toml: unused manifest key: dev
warning: /home/sri/Github/bempp-rs/fmm/Cargo.toml: unused manifest key: target.aarch64-apple-darwin.rustflags
warning: unused imports: `RandomAccessMut`, `rlst_col_vec`
  --> field/src/field.rs:14:28
   |
14 |     dense::{rlst_mat, Dot, RandomAccessMut, RawAccess, RawAccessMut, Shape, rlst_col_vec},
   |                            ^^^^^^^^^^^^^^^                                  ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `axial_reflection_surface`, `axially_reflect_components`, `diagonal_reflection`, `diagonally_reflect_components`, `self`
  --> field/src/field.rs:28:15
   |
28 |     surface::{axial_reflection_surface, diagonal_reflection},
   |               ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^
29 |     transfer_vector::{
30 |         axially_reflect_components, compute_transfer_vectors, compute_transfer_vectors_unique,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
31 |         diagonally_reflect_components, self,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^

warning: unused import: `bempp_tools::Array3D`
 --> field/src/types.rs:4:5
  |
4 | use bempp_tools::Array3D;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `j`
   --> field/src/field.rs:238:18
    |
238 |             for (j, sibling) in siblings.iter().enumerate() {
    |                  ^ help: if this is intentional, prefix it with an underscore: `_j`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `k`
   --> field/src/field.rs:239:22
    |
239 |                 for (k, halo_child) in halo_child_set.iter().enumerate() {
    |                      ^ help: if this is intentional, prefix it with an underscore: `_k`

warning: type alias `PermutationMatrix` is never used
  --> field/src/types.rs:92:6
   |
92 | type PermutationMatrix =
   |      ^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: type alias `PermutedMultiIndices` is never used
  --> field/src/types.rs:96:6
   |
96 | type PermutedMultiIndices = Vec<usize>;
   |      ^^^^^^^^^^^^^^^^^^^^

warning: `bempp-field` (lib) generated 7 warnings (run `cargo fix --lib -p bempp-field` to apply 5 suggestions)
   Compiling bempp-fmm v0.1.0 (/home/sri/Github/bempp-rs/fmm)
warning: unused imports: `HashSet`, `Mul`, `MutexGuard`, `cell::RefCell`
 --> fmm/src/field_translation.rs:3:28
  |
3 |     collections::{HashMap, HashSet},
  |                            ^^^^^^^
4 |     ops::{Deref, DerefMut, Mul},
  |                            ^^^
5 |     sync::{Arc, Mutex, MutexGuard, RwLock},
  |                        ^^^^^^^^^^
6 |     time::Instant, cell::RefCell,
  |                    ^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `FromPrimitive`
  --> fmm/src/field_translation.rs:13:20
   |
13 | use num::{Complex, FromPrimitive};
   |                    ^^^^^^^^^^^^^

warning: unused imports: `flip3`, `hadamard::hadamard_product_sibling`, `rfft3_fftw`
  --> fmm/src/field_translation.rs:17:19
   |
17 |     array::{pad3, flip3},
   |                   ^^^^^
18 |     fft::{irfft3_fftw, irfft3_fftw_par_vec, rfft3_fftw, rfft3_fftw_par_vec},
   |                                             ^^^^^^^^^^
19 |     hadamard::hadamard_product_sibling,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `self`
  --> fmm/src/field_translation.rs:27:35
   |
27 |     kernel::{Kernel, KernelScale, self},
   |                                   ^^^^

warning: unused imports: `constants::ROOT`, `implementations::helpers::find_corners`
  --> fmm/src/field_translation.rs:31:75
   |
31 | use bempp_tree::{types::{morton::MortonKey, single_node::SingleNodeTree}, constants::ROOT, implementations::helpers::find_corners};
   |                                                                           ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `common::tools::PrettyPrint`, `global`, `rlst_rand_col_vec`
  --> fmm/src/field_translation.rs:33:5
   |
33 |     common::tools::PrettyPrint,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
36 |         global, rlst_col_vec, rlst_mat, rlst_pointer_mat, rlst_rand_col_vec, traits::*, Dot, Shape,
   |         ^^^^^^                                            ^^^^^^^^^^^^^^^^^

warning: unused import: `constants::CACHE_SIZE`
  --> fmm/src/field_translation.rs:41:5
   |
41 |     constants::CACHE_SIZE,
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unnecessary parentheses around pattern
   --> fmm/src/field_translation.rs:689:24
    |
689 |             .for_each(|(freq)| {
    |                        ^    ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
689 -             .for_each(|(freq)| {
689 +             .for_each(|freq| {
    |

warning: unused doc comment
   --> fmm/src/field_translation.rs:791:9
    |
791 |           /// TEST CODE TO BE REMOVED
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
792 | /         if level == 4 {
793 | |
794 | |             let mut full_v_lists = Vec::new();
795 | |             for (i, tgt) in targets.iter().enumerate() {
...   |
993 | |             println!("fft pot {:?}", tmp)
994 | |         }
    | |_________- rustdoc does not generate documentation for expressions
    |
    = help: use `//` for a plain comment
    = note: `#[warn(unused_doc_comments)]` on by default

warning: unused imports: `common::traits::ColumnMajorIterator`, `dense::rlst_rand_mat`
   --> fmm/src/fmm.rs:381:16
    |
381 |     use rlst::{common::traits::ColumnMajorIterator, dense::rlst_rand_mat};
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `evaluate_laplace_one_target`
   --> fmm/src/fmm.rs:384:36
    |
384 |     use bempp_kernel::laplace_3d::{evaluate_laplace_one_target, Laplace3dKernel};
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `MortonKeyInterface`
  --> fmm/src/field_translation.rs:28:18
   |
28 |     tree::{Tree, MortonKeyInterface},
   |                  ^^^^^^^^^^^^^^^^^^

warning: unused variable: `global_idxs`
  --> fmm/src/field_translation.rs:68:25
   |
68 |                     let global_idxs = leaf_points
   |                         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_global_idxs`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `halo_children`
   --> fmm/src/field_translation.rs:681:13
    |
681 |         let halo_children = halo.iter().flat_map(|h| h.children()).collect_vec();
    |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_halo_children`

warning: unused variable: `n_target_check_surface`
   --> fmm/src/field_translation.rs:825:17
    |
825 |             let n_target_check_surface = target_check_surface.len() / 3;
    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_n_target_check_surface`

warning: unused variable: `tst_pot`
   --> fmm/src/field_translation.rs:827:21
    |
827 |             let mut tst_pot = vec![0f64; ncoeffs];
    |                     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_tst_pot`

warning: unused variable: `v_list`
   --> fmm/src/field_translation.rs:829:21
    |
829 |             let mut v_list: Vec<MortonKey> = tgt
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_v_list`

warning: unused variable: `n_corners`
   --> fmm/src/field_translation.rs:837:17
    |
837 |             let n_corners = 8;
    |                 ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_n_corners`

warning: unused variable: `test_check_potential`
   --> fmm/src/field_translation.rs:943:21
    |
943 |             let mut test_check_potential = vec![0f64; size];
    |                     ^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_test_check_potential`

warning: unused variable: `multi_indices`
    --> fmm/src/field_translation.rs:1002:17
     |
1002 |         let (_, multi_indices) = MortonKey::surface_grid(self.fmm.order);
     |                 ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_multi_indices`

warning: unused variable: `check_potentials`
    --> fmm/src/field_translation.rs:1003:13
     |
1003 |         let check_potentials = global_check_potentials.data().chunks_exact(size).map(|chunk| {
     |             ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_check_potentials`

warning: unused variable: `signal_sibling_chunk`
   --> fmm/src/field_translation.rs:708:46
    |
708 |                     .for_each(|(sibling_idx, signal_sibling_chunk)| {
    |                                              ^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_signal_sibling_chunk`

warning: unused variable: `sig`
   --> fmm/src/field_translation.rs:746:59
    |
746 | ...                   .for_each(|((sav, sig), ker)| {
    |                                         ^^^ help: if this is intentional, prefix it with an underscore: `_sig`

warning: variable does not need to be mutable
   --> fmm/src/field_translation.rs:574:17
    |
574 |             let mut padded_signal = pad3(&signal, pad_size, pad_index);
    |                 ----^^^^^^^^^^^^^
    |                 |
    |                 help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> fmm/src/field_translation.rs:553:13
    |
553 |         let mut chunks = padded_signals.data_mut().par_chunks_exact_mut(size);
    |             ----^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> fmm/src/field_translation.rs:796:21
    |
796 |                 let mut v_list: Vec<MortonKey> = tgt
    |                     ----^^^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> fmm/src/field_translation.rs:827:17
    |
827 |             let mut tst_pot = vec![0f64; ncoeffs];
    |                 ----^^^^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> fmm/src/field_translation.rs:829:17
    |
829 |             let mut v_list: Vec<MortonKey> = tgt
    |                 ----^^^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> fmm/src/field_translation.rs:943:17
    |
943 |             let mut test_check_potential = vec![0f64; size];
    |                 ----^^^^^^^^^^^^^^^^^^^^
    |                 |
    |                 help: remove this `mut`

warning: unused variable: `times`
   --> fmm/src/fmm.rs:440:13
    |
440 |         let times = datatree.run(Some(true));
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_times`

warning: variable does not need to be mutable
   --> fmm/src/fmm.rs:521:13
    |
521 |         let mut charge_dict = build_charge_dict(&global_idxs[..], &charges[..]);
    |             ----^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: `bempp-fmm` (lib test) generated 31 warnings (run `cargo fix --lib -p bempp-fmm --tests` to apply 29 suggestions)
    Finished release [optimized] target(s) in 2.35s
     Running unittests src/lib.rs (/home/sri/Github/bempp-rs/target/release/deps/bempp_fmm-5b810e6b2c4bc72e)

running 1 test
test fmm::test::test_fmm_fft ... FAILED

failures:

---- fmm::test::test_fmm_fft stdout ----
data organisation time 0
fft time 0
hadamard products 403.373µs
ifft time 4
local time 0
data organisation time 0
fft time 0
hadamard products 5.331523ms
ifft time 0
local time 0
data organisation time 0
fft time 1
hadamard products 75.366935ms
ifft time 0
test check pot hat [48.983396107234974, 60.169987707453444, 53.87925845502245, 67.12458250686971, 53.91770136336748, 66.7449766662225, 58.883292300773206, 74.19401391894166]
fft pot [48.983396107234974, 60.169987707453444, 53.87925845502245, 67.12458250686971, 53.91770136336748, 66.7449766662225, 58.883292300773206, 74.19401391894166]
local time 1
FFT times Some({"l2p": 0, "m2l": 388, "l2l": 1, "m2p": 3, "p2p": 21, "m2m": 2, "p2l": 6, "p2m": 2})
thread 'fmm::test::test_fmm_fft' panicked at fmm/src/fmm.rs:529:9:
assertion failed: false
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    fmm::test::test_fmm_fft

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 1 filtered out; finished in 0.64s

error: test failed, to rerun pass `--lib`
