name: ðŸ§ª Test

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 7 * * 1"

jobs:
  run-tests-rust:
    name: Run tests (Rust)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: ["stable", "beta", "nightly"]
        mpi: [ 'mpich', 'openmpi']
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust-version }}
          components: rustfmt
      - name: Set up MPI
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: ${{ matrix.mpi }}
      - uses: actions/checkout@v2
      - name: Style checks
        run: |
          cargo fmt -- --check
      - name: Build rust library
        run: |
          cargo build --features "strict"
          cargo build --release --features "strict"
      - name: Run tests
        run: |
          cargo test --lib --features "strict"
          cargo test --lib --features "mpi,strict"
      - name: Build docs
        run: |
          cargo doc --features "strict"

      - name: Setup Pages
        uses: actions/configure-pages@v3
        #if: ${{ github.ref == 'refs/heads/main' }}
        if: ${{ matrix.rust-version == 'stable' && matrix.mpi == 'mpich' }}
      - name: Upload artifact for docs
        uses: actions/upload-pages-artifact@v1
        with:
          path: 'target/doc'
        #if: ${{ github.ref == 'refs/heads/main' }}
        if: ${{ matrix.rust-version == 'stable' && matrix.mpi == 'mpich' }}
      - name: Deploy docs to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
        #if: ${{ github.ref == 'refs/heads/main' }}
        if: ${{ matrix.rust-version == 'stable' && matrix.mpi == 'mpich' }}

      - name: Run examples
        run: |
          cd tools
          cargo test --examples  --features "strict"

  run-tests-python:
    name: Run tests (Python)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/checkout@v3
      - name: Install Python requirements
        run: python3 -m pip install pytest-xdist flake8
      - name: Style checks
        run: |
          python3 -m flake8 python/test
      - name: Install tomllib (for Python <3.11)
        run: python3 -m pip install tomli
        if: ${{ matrix.python-version == '3.7' || matrix.python-version == '3.8' || matrix.python-version == '3.9' || matrix.python-version == '3.10' }}
      - run: python3 -m pytest -n=auto python/test
        name: Run tests
